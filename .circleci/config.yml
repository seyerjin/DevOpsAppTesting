version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.4.8

jobs:
  test_local:
    docker:
      - image: cimg/python:3.9
    steps:
      - checkout
      - browser-tools/install-browser-tools
      - run:
          name: Install necessary system dependencies for browsers
          command: sudo apt-get update && sudo apt-get install -y libgtk-3-0 libdbus-glib-1-2 libxt6 libasound2
      - run:
          name: Install Robot Framework and SeleniumLibrary
          command: pip install robotframework robotframework-seleniumlibrary
      - run:
          name: "Run Tests on Local Chrome"
          command: |
            mkdir -p results/local
            robot -v BROWSER:Chrome -d results/local tests/
      - store_artifacts:
          path: results/local
          destination: test-reports/local

  test_remote:
    docker:
      - image: cimg/python:3.9
    steps:
      - checkout
      - browser-tools/install-browser-tools
      - run:
          name: Install necessary system dependencies for browsers
          command: sudo apt-get update && sudo apt-get install -y libgtk-3-0 libdbus-glib-1-2 libxt6 libasound2
      - run:
          name: Install Opera and OperaDriver
          command: |
            wget -q -O operadriver.zip https://github.com/operasoftware/operachromiumdriver/releases/latest/download/operadriver_linux64.zip
            unzip operadriver.zip -d operadriver
            sudo mv operadriver/operadriver_linux64/operadriver /usr/local/bin/
            wget -q -O opera.deb https://download3.operacdn.com/pub/opera/desktop/stable/linux/opera-stable_current_amd64.deb
            sudo dpkg -i opera.deb || sudo apt-get install -yf
            wget -qO- https://deb.opera.com/archive.key | gpg --dearmor > opera-archive-keyring.gpg
            sudo mv opera-archive-keyring.gpg /usr/share/keyrings/
            echo 'deb [signed-by=/usr/share/keyrings/opera-archive-keyring.gpg] https://deb.opera.com/opera-stable/ stable non-free' | sudo tee /etc/apt/sources.list.d/opera.list
            sudo apt-get update
      - run:
          name: Install Edge and Edge WebDriver
          command: |
            wget -q -O microsoft.gpg https://packages.microsoft.com/keys/microsoft.asc
            gpg --dearmor microsoft.gpg
            sudo mv microsoft.gpg.gpg /usr/share/keyrings/microsoft-archive-keyring.gpg
            sudo sh -c 'echo "deb [signed-by=/usr/share/keyrings/microsoft-archive-keyring.gpg] https://packages.microsoft.com/repos/edge stable main" > /etc/apt/sources.list.d/microsoft-edge.list'
            sudo apt-get update
            sudo apt-get install -y microsoft-edge-stable
            EDGE_DRIVER_VERSION=$(wget -qO- https://msedgedriver.azureedge.net/LATEST_STABLE | grep -oP '^[0-9.]+')
            wget -q -O msedgedriver.zip https://msedgedriver.azureedge.net/$EDGE_DRIVER_VERSION/edgedriver_linux64.zip
            unzip msedgedriver.zip -d msedgedriver
            sudo mv msedgedriver/msedgedriver /usr/local/bin/
      - run:
          name: Install Robot Framework and SeleniumLibrary
          command: pip install robotframework robotframework-seleniumlibrary
      - run:
          name: "Run Tests on Multiple Remote Browsers"
          command: |
            robot -v BROWSER:Chrome -d results/remote tests/
            robot -v BROWSER:Firefox -d results/remote tests/
            robot -v BROWSER:Opera -d results/remote tests/
            robot -v BROWSER:Edge -d results/remote tests/
            robot -v BROWSER:Safari -d results/remote tests/
      - store_artifacts:
          path: results/remote
          destination: test-reports
  test_mac:
    macos:
      xcode: "15.4.0"
    steps:
      - checkout
      - run:
          name: Install necessary system dependencies
          command: brew install geckodriver chromedriver operadriver
      - run:
          name: Install Robot Framework and SeleniumLibrary
          command: pip3 install robotframework robotframework-seleniumlibrary
      - run:
          name: "Run Tests on Multiple Browsers"
          command: |
            robot -v BROWSER:Safari -d results/safari tests/
      - store_artifacts:
          path: results/remote
          destination: test-reports

  store_artifacts:
    docker:
      - image: cimg/python:3.9
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - store_artifacts:
          path: results
          destination: test-reports

workflows:
  version: 2
  build:
    jobs:
      - test_local
      - test_remote
      - test_mac
      - store_artifacts:
          requires:
            - test_local
            - test_remote
